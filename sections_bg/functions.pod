=encoding utf8

=head1 Деклариране на функции

Z<functions>

X<functions; declaration>
X<builtins; C<sub>>

Функция се декларира посредством резервираната дума C<sub>:

=begin programlisting

    B<sub> greet_me  { ... }

=end programlisting

По този начин функцията C<greet_me()> е декларирана и готова 
да бъде ползвана на което и да е масто в нашата програма.

X<функции; предварително деклариране>

Не е наложително да I<дефинирате> всяка функция при декларирането й. 
I<предварителното деклариране> указва на Perl да резервира името на тази
функция, и че дефиницията й ще последва по-нататък:

=begin programlisting

    sub greet_sun;

=end programlisting

=head1 Стартиране на функции

X<functions; invoking>

Използвайки името на функцията последвано от
отваряща и затваряща скоби, предизвиквате стартирането на тази функция, като 
също е възможно да подадете входни данни( обикновено наричани - аргументи):

=begin programlisting

    greet_me( 'Jack', 'Brad' );
    greet_me( 'Snowy' );
    greet_me();

=end programlisting

В примерите по-горе скобите не са абсолютно задължителни, дори и да 
използвате прагмата C<strict> --те просто внасят прегледност при четене
на кода и улесняват парсера на Perl. Ако се зачудите дали да се слагат или
не, по-добре е да ги има.

Аргументите подавани на една функция могат да бъдат всякакви изрази, 
както и обикновени промениливи.

=begin programlisting

    greet_me( $name );
    greet_me( @authors );
    greet_me( %editors );

=end programlisting

... имайте предвид обаче, че подходът на Perl 5 използван по подразбиране 
за обработка на аргументи на функция, може да обърка по неопитните.

=head1 Аргументи подадени към функция

Z<function_parameters>

X<parameters>
X<functions; parameters>
X<C<@_>>
X<parameters; flattening>

Всяка функция получава cвоите аргументи във вид на единствен масив, C<@_>
(L<default_array_variables>). Perl I<сплесква> всички подадени аргументи 
в списък. Функцията трябва или да "разопакова" аргументите в 
отделни промениливи, или да работи директно с масива C<@_>:

=begin programlisting

    sub greet_one
    {
        B<my ($name) = @_>;
        say "Hello, $name!";
    }

    sub greet_all
    {
        say "Hello, B<$_!" for @_>;
    }

=end programlisting

Повечето програмисти ползват или C<shift>, или разопаковат списъка,макар че C<@_> 
може да се използва като обикновен масив, можете да достъпите отделните му елементи
посредсвом поредния им номер:

=begin programlisting

    sub greet_one_shift
    {
        B<my $name = shift>;
        say "Hello, $name!";
    }

    sub greet_two_no_shift
    {
        my ($hero, $sidekick) = @_;
        say "Well if it isn't $hero and $sidekick. Welcome!";
    }

    sub greet_one_indexed
    {
        B<my $name = $_[0]>;
        say "Hello, $name!";

        # or, less clear
        say "Hello, $_[0]!";
    }

=end programlisting

... можете да ползвате C<shift>, C<unshift>, C<push>, C<pop>, C<splice>, както и част от C<@_>.

=begin tip The Implicit Them

Струва си да се запомни, че вградените операции работещи с масиви
използват C<@_> като аргумент по подразбиране I<вътре във функцията>. 
И вие бихте могли да се възползвате от това удобсво.

=end tip

За да ползвате в скаларен контекст един от подадените параметри  от масива C<@_>
е необходимо да използвате C<shift>, достъп до даден индекс от масива C<@_>, 
или израз в списъчен контекст посредсвом скоби. В противен случай, Perl 5 любезно 
ще изрази масива C<@_> в скаларен контекст и ще ви даде броя на подадените параметри:

=begin programlisting

    sub bad_greet_one
    {
        B<my $name = @_>;  # buggy
        say "Hello, $name; you look numeric today!"
    }

=end programlisting

Отделянето на стойностите на аргументите в списъчен контекст често
е по-лесно за четене от множество редове ползващи C<shift>. 
Например:

=begin programlisting

    sub calculate_value
    {
        # multiple shifts
        my $left_value  = shift;
        my $operation   = shift;
        my $right_value = shift;
        ...
    }

=end programlisting

... сравнено с:

=begin programlisting

    sub calculate_value
    {
        B<my ($left_value, $operation, $right_value) = @_;>
        ...
    }

=end programlisting

Понякога се налага само част от аргументите да бъдат извлечени от C<@_> ,
а останалите да бъдат подадени към друга функция:

=begin programlisting

    sub delegated_method
    {
        my $self = B<shift>;
        say 'Calling delegated_method()'

        $self->delegate->delegated_method( B<@_> );
    }

=end programlisting

Ползвайте C<shift> когато подавате само един аргумент на функциите си. Когато има 
повече аргументи, е по-удачно да се ползва списъчно подаване на стойности за променивите.

=begin tip Real Function Signatures

X<CPAN; C<signatures>>
X<CPAN; C<Method::Signatures>>
X<CPAN; C<MooseX::Method::Signatures>>
X<CPAN; C<Method::Signatures::Simple>>

Няколко CPAN дистрибуции разширяват обработката на аргументи от Perl 5
добавяйки нов синтаксис и нови опции.
C<Signatures> и C<Method::Signatures> са с огромни възможности.
C<Method::Signatures::Simple> е по-простичка, но доста полезна дистрибуция.
C<MooseX::Method::Signatures> работи великолепно с Moose (L<moose>).

=end tip

=head2 Сплескване (Flattening)

Превръщането на аргументите в списък C<@_> се прави още при извикването
на функцията. Подаване на hash като аргумент подава на функцията списък с 
двойки ключ/стойност:

=begin programlisting

    my %pet_names_and_types = (
        Lucky   => 'dog',
        Rodney  => 'dog',
        Tuxedo  => 'cat',
        Petunia => 'cat',
    );

    show_pets( %pet_names_and_types );

    sub show_pets
    {
        my %pets = @_;
        while (my ($name, $type) = each %pets)
        {
            say "$name is a $type";
        }
    }

=end programlisting

Когато Perl превърне C<%pet_names_and_types> в списък, подредбата на двойките
ключ/стойност на hash-а ще е различна, но винаги списъкът ще съдържа ключ 
непосредствено последван от своята стойност. Присвояването на Hash в C<show_pets()> 
работи по същтия начин както по-явното присвояване C<%pet_names_and_types>.

Превръщането на аргументите в списък често е полезно, но трябва да се внимава
при смесването на скаларни и съставни аргументи при подаването на аргументи на функция.
При писането на функция C<show_pets_of_type()>, на която подаваме един аргумент за вид
домашен любимец за показване, добре е да се подаде вида като I<първи> аргумент 
(или като последен и да се ползва C<pop> за да извадим аргумента от края на масива C<@_>):

=begin programlisting

    sub show_pets_by_type
    {
        B<my ($type, %pets) = @_>;

        while (my ($name, $species) = each %pets)
        {
            B<next unless $species eq $type;>
            say "$name is a $species";
        }
    }

    my %pet_names_and_types = (
        Lucky   => 'dog',
        Rodney  => 'dog',
        Tuxedo  => 'cat',
        Petunia => 'cat',
    );

    show_pets_by_type( 'dog',   %pet_names_and_types );
    show_pets_by_type( 'cat',   %pet_names_and_types );
    show_pets_by_type( 'moose', %pet_names_and_types );

=end programlisting

=head2 Изсмукване на аргументи (Slurping)

Z<parameter_slurping>
X<parameters; slurping>

Приравняването към съставен тип променливи изсмуква всички аргументи, 
например приравняването към C<%pets> I<изсмуква> всички оставащи стойности 
от списък C<@_>. Ако C<$type> аргумента е поставен на края на списъка C<@_>, 
Perl ще даде предупреждение за нечетен брой елемента в hash-а. Вие I<бихте могли> 
да избегнете това:

=begin programlisting

    sub show_pets_by_type
    {
        B<my $type = pop;>
        B<my %pets = @_;>

        ...
    }

=end programlisting

... за сметка на яснотата на кода. Същия принцип може да се приложи и когато се
подават стойностите на масив като аргумент. Използвайте указатели (L<references>) 
за да избегнете преобразуването в списък и изсмукването на аргументи.

=head2 Псевдоними

X<parameters; aliasing>
X<functions; aliasing parameters>

При списъка C<@_> има една малка подробност; той създава I<псевдоними> на 
аргументите подадени към функцията така че те могат да бъдат променяни. 
На пример:

=begin programlisting

    sub modify_name
    {
        $_[0] = reverse $_[0];
    }

    my $name = 'Orange';
    modify_name( $name );
    say $name;

    # prints C<egnarO>

=end programlisting

Ако промените елемент директно в списъка C<@_> това ще промени и оригиналния
параметър.
Бъдете внимателни, и разопаковайте C<@_> преди употреба на аргументите.

=head1 Функции и Именовани-пространсва 

Всяка функция се съдържа в някое именовано-пространство (L<packages>). Функциите
от недекларирано именовано-пространство --функциите които не са декларирани
след изрична употреба на C<package> директивата--се съдържат в главното C<main> 
именовано-пространство. Можете да декларирате функция в различно 
именовано-пространство като поставите неговото име пред името на функцията:

=begin programlisting

    sub B<Extensions::Math::>add {
        ...
    }

=end programlisting

Този код ще декларира функцията и ще създаде именованото-пространство,
 ако е необходимо. Трябва да се запомни че пакетите на Perl 5 са отворени
 за промени във всеки момент. В едно именовано-пространство е възможно 
 да се декларира само една функция с дадено име . В противен случай Perl 5 
 ще издаде предупреждение за предефиниране на функция. 
Тези предупреждения могат да бъдат спрени с употребата на C<no warnings
'redefine'>--при положение че сте убедени че имате нужда от това.

Извикването на функции от други именовани-пространства става
чрез употреба на пълното квалифициращо име на функцията:

=begin programlisting

    package main;

    Extensions::Math::add( $scalar, $vector );

=end programlisting

Функции принадлежащи на дадено именовано-пространство стават I<видими> за програмата
посредством употребата на пълното им квалифициращо име. Вътре в именованото-
пространство, можете да използвате съкратеното име на функциите декларирани в това
именовано-пространство. Можете също така да импортирате (вкарате) имена на функции от други 
именовани-пространства.

=head2 Импортване

Z<importing>

X<functions; importing>
X<builtins; C<use>>

Когато се зарежда модул (L<modules>) с вградената директива C<use> , Perl автоматично
извиква метода C<import()> на този модул. Модулите могат да осигурят свой собствен 
C<import()> метод, който подсигурява че са на разположение някои или всички дефинирани
символи от извикващия пакет. Всички аргументи следващи името на модула при 
C<use> директивата биват подадени на метода C<import()> на модула. По този начин:

=begin programlisting

    use strict;

=end programlisting

... зарежда модула F<strict.pm> и извиква неговия метод C<< strict->import() >> 
без аргументи, докато:

=begin programlisting

    use strict 'refs';
    use strict qw( subs vars );

=end programlisting

... зарежда модула F<strict.pm>, извиква C<< strict->import( 'refs' ) >>, 
и след това C<< strict->import( 'subs', vars' ) >>.

C<use> има специално поведение спрямо C<import()>, но вие можете да извикате
C<import()> директно. Предишния пример с C<use> е еквивалентен на:

=begin programlisting

    BEGIN
    {
        require strict;
        strict->import( 'refs' );
        strict->import( qw( subs vars ) );
    }

=end programlisting

Вградената директива C<use> добавя по подразбиране блок C<BEGIN> около тези изрази
така че извикването на C<import()> се случва I<непосредствено> след като парсерът 
е компилирал изцяло директивата C<use>. Това подсигурява, че всички импортирани 
символи са на разположение при компилацията на отаналата част от програмата. 
В противен случай, всички функции I<импортирани> от други модули, които не са
 I<декларирани> в настоящия файл ще приличат на голи думи, и ще нарушат 
 директивата C<strict>.

=head1 Съобщения за грешки

Z<reporting_errors>
X<builtins; C<caller>>

Във функцията, можете да проверите контекста на извикване 
посредством вградената функция C<caller>. При положение че не са подадени
аргументи, тази функция връща списък от три елемента съдържащ името на 
извикващия пакет, името на файла от който идва извикването и номера на реда
в който извикването на функцията е осъществено:

=begin programlisting

    package main;

    main();

    sub main
    {
        show_call_information();
    }

    sub show_call_information
    {
        my ($package, $file, $line) = caller();
        say "Called from $package in $file:$line";
    }

=end programlisting

Цялата последователност на извикването също е на разположение.
Подавайки един целочислен аргумент I<n> на C<caller()> за да получите 
извикващия на извикващия на извикващия I<n> пъти.
С други думи, ако C<show_call_information()> използва C<caller(0)>, тя
ще получи информация за извикването от C<main()>. Ако използва
C<caller(1)>, ще получи ниформацията за извикването още от началото 
на програмата.

Този допълнителен аргумент инструктира C<caller> също така, да даде 
допълнителна информация включително името на функцията и контекста на 
извикването:

=begin programlisting

    sub show_call_information
    {
        my ($package, $file, $lineB<, $func>) = caller(B<0>);
        say "Called B<$func> from $package in $file:$line";
    }

=end programlisting

X<C<Carp>>
X<C<Carp>; C<croak()>>
X<C<Carp>; C<carp()>>

Стандартния модул C<Carp> използва тази техника за докладване на грешки и
за подаване на предупреждения във функциите. Ако се използва на мястото на 
C<die> в библиотечен код, C<croak()> дава изключение погледнато от страната 
на извикващата функция. C<carp()> дава предупреждения за файла и номера на реда
на извикващата го функция (L<producing_warnings>).

Тази функционалност е най-полезна когато се проверяват аргументи или
при проверка на предварителни условия за дадена функция, за да 
подскаже че извикващият код е може би грешен.

=head2 Валидиране на аргументи

Perl прави каквото е възможно за да осъществи това което програмиста
има като идея, предлага дори някои начини за тестване на валидността на аргументите
подадени на дадена функция. Използвайки C<@_> в скаларен контекст
проверявате дали е правилен броя аргументи подадени на дадена функция:

=begin programlisting

    sub add_numbers
    {
        croak 'Expected two numbers, received: ' . @_
            unless @_ == 2;

        ...
    }

=end programlisting

X<CPAN; C<Params::Validate>>

Проверката по тип е малко по-трудна заради зависимите от оператора приравнявания
между типовете (L<context_philosophy>). Модула на CPAN C<Params::Validate> предоставя
повече строгост.

=head1 Функциите в дълбочина

Функциите са основата на по-сложните конструкции в Perl.

=head2 Осъзнаване на контекста

X<context>
X<C<wantarray>>
X<builtins; C<wantarray>>

Вградените в Perl 5 конструкции, "знаят" така да се каже,
дали сте ги извикали в свободен, скаларен или списъчен контекст.
Такова поведение може да се придаде и на вашите функции. Вградената функция
с погрешно зададено имеN<Вижте C<perldoc -f wantarray>
ако искате да проверите.> C<wantarray> връща C<undef> за да покаже свободен 
контекст, стойност false за да покаже скаларен контекст, и стойност true 
за да укаже че се използва в списъчен контекст.

=begin programlisting

    sub context_sensitive
    {
        my $context = wantarray();

        return qw( List context )   if         $context;
        say    'Void context'   unless defined $context;
        return 'Scalar context' unless         $context;
    }

    context_sensitive();
    say my $scalar = context_sensitive();
    say context_sensitive();

=end programlisting

Това може да е полезно за функции ,които произвеждат "скъпи" за връщане 
стойности. В празен контекст можете да избегнете това.
Някои функции връщат списък в списъчен контекст, като първия елемент на
списъка е указател към списък или масив в скаларен контекст. Няма единствена и 
най-правилна препоръка за употребата на C<wantarray>. 
Понякога е по ясно, ако се напише отделна функция за да се избегне объркването.


=begin tip Да поставим всичко в Контекста му

X<C<Want>>
X<C<Contextual::Return>>

Дистрибуциите от CPAN C<Want> на Роб Хаустон и C<Contextual::Return> на Деймиан Конуей
предлагат множество възможности за написване на мощни и полезни съобразени с контекста 
интерфейси.

=end tip

=head2 Рекурсия

Z<recursion>
X<recursion>
X<call frame>
X<functions; call frame>

Да предположим, че искате да намерите някой елемент от един сортиран масив.
Бихте I<могли> да обходите всеки елемент по отделно, в търсене на дадения елемент,
но по този начин, средно ще трябва да обходите половината елементи на масива.
Друг подход, би могъл да бъде да се раздели масива на две половини, да се избере
един елемент от средата, да се сравни, и да се повтори с по-малките елементи в долната
част на масива или с по-големите в горната част. По принципа разделяй и владей. Когато
свършат елементите или намерите търсения елемент, спираме.

Автоматизиран тест за тази техника би могъл да изглежда така:

=begin programlisting

    use Test::More;

    my @elements =
    (
        1, 5, 6, 19, 48, 77, 997, 1025, 7777, 8192, 9999
    );

    ok   elem_exists(     1, @elements ),
            'found first element in array';
    ok   elem_exists(  9999, @elements ),
             'found last element in array';
    ok ! elem_exists(   998, @elements ),
            'did not find element not in array';
    ok ! elem_exists(    -1, @elements ),
            'did not find element not in array';
    ok ! elem_exists( 10000, @elements ),
            'did not find element not in array';

    ok   elem_exists(    77, @elements ),
            'found midpoint element';
    ok   elem_exists(    48, @elements ),
            'found end of lower half element';
    ok   elem_exists(   997, @elements ),
            'found start of upper half element';

    done_testing();

=end programlisting

Рекурсията е измамно проста концепция. Всяко извикване на функция в Perl
създава I<извикваща рамка>, вградена структура от данни, представляваща
самото извикване, включително и лексикалното обкръжение на текущото извикване
на функцията. Това означава, че функцията може да извика сама себе си, или 
с други думи I<се преповтаря>.

За да осъщесрвим по-горе описания тест, ще напишем функцията C<elem_exists()>,
която знае как сама да извиква себе си, разделяйки списъка на половина при всяко
такова само-извикване:

=begin programlisting

    sub elem_exists
    {
        my ($item, @array) = @_;

        # break recursion with no elements to search
        return unless @array;

        # bias down with odd number of elements
        my $midpoint = int( (@array / 2) - 0.5 );
        my $miditem  = $array[ $midpoint ];

        # return true if found
        return 1 if $item  == $miditem;

        # return false with only one element
        return   if @array == 1;

        # split the array down and recurse
        return B<elem_exists>(
            $item, @array[0 .. $midpoint]
        ) if $item < $miditem;

        # split the array and recurse
        return B<elem_exists>(
             $item, @array[ $midpoint + 1 .. $#array ]
        );
    }

=end programlisting

Възможно е разбира се, да напишете подобно решение не проблема използвайки
процедурен подход, и вие да обработвате половинките от списъка, но този 
рекурсивен подход възлага на Perl да се грижи за дреболиите.

=head2 Лексикали

Всяко извикване на една функция създава собствена I<инстанция> с лексикална 
видимост. Въпреки че декларацията на C<elem_exists()> създава отделна област
на видимост за лексикалите C<$item>, C<@array>, C<$midpoint>, и C<$miditem>,
всяко I<извикване> на C<elem_exists()> -- дори рекурсивните -- запазва стойностите
на тези лексикали по отделно.

Освен че C<elem_exists()> може сама да извика себе си, но и лексикалните променливи
при всяко извикване са предпазени и отделени:

=begin programlisting

    B<use Carp 'cluck';>

    sub elem_exists
    {
        my ($item, @array) = @_;

        B<cluck "[$item] (@array)";>

        # other code follows
        ...
    }

=end programlisting

=head2 Tail Calls

Z<tail_calls>
X<recursion; guard conditions>

Един от I<недостатъците> на рекурсията е че трябва много внимателно
да определите условията за връщане(return), иначе рискувате функцията
да извиква себе си до безкрай. По тази причина функцията C<elem_exists()> 
има няколко C<return> клаузи.

Perl предоставя ползното предупреждение C<Deep recursion on subroutine> 
в случаите на предполагаема вечна рекурсия. Границата от 100 рекурсивни
извиквания е случайно избрана, но много често е полезна. Това предупреждение
може да бъде изключено с C<no warnings 'recursion'> в областта на видимост
на рекурсивното извикване.

Поради това че всяко извикване на функция резервира нова рамка за извикване
и пространство за запазване на лексикали, програми с повече рекурсии използват
много повече памет от тези кодирани с употребата на цикли.
I<Tail call elimination> може да помогне в такива случаи.

I<tail call> е извикване на функция което веднага връща резултата от 
функцията. Тези рекурсивни извиквания на C<elem_exists()>:

=begin programlisting

    # split the array down and recurse
    return B<elem_exists>(
        $item, @array[0 .. $midpoint]
    ) if $item < $miditem;

    # split the array and recurse
    return B<elem_exists>(
         $item, @array[ $midpoint + 1 .. $#array ]
    );

=end programlisting

... са отлични кандидати за такова премахване на опашати извиквания. С тази 
оптимизация се избягва връщане към натоящото извикване за да се върнем към 
неговото родителско извикване. Вместо това то връща направо към родителското
извикване: 

X<C<goto>>
X<functions; C<goto>>
X<builtins; C<goto>>

За съжаление, Perl 5 не елиминира опашати извиквания автоматично. 
Можете да го направите със специална форма на вградената функция C<goto>. 
За разлика от формата която допринася за получаването на спагети код,
формата на C<goto> функцията замества настоящото извикване с извикване 
на друга функция. Можете да ползвате извикване по име на функция или 
чрез указател. За да подадете различни аргументи, направо ги присвоете
на C<@_>:

=begin programlisting

    # split the array down and recurse
    if ($item < $miditem)
    {
        @_ = ($item, @array[0 .. $midpoint]);
        B<goto &elem_exists;>
    }

    # split the array up and recurse
    else
    {
        @_ = ($item, @array[$midpoint + 1 .. $#array] );
        B<goto &elem_exists;>
    }

=end programlisting

Понякога оптимизациите загрозяват малко кода.

=head1 Капани и Подлъгваща функционалност

X<functions; misfeatures>
X<functions; Perl 4>
X<functions; Perl 1>
X<C<&>; sigil>
X<sigils; C<&>>
X<builtins; C<do>>

Perl 5 продължава да поддържа едновремешния начин за извикване на функция,
пренесен от старите версии на Perl. Докато сега можем да извикаме функцип
по име, предишните версии на Perl изискваха извикването да става посредством
поставяне на сивола (C<&>) пред името на функцията. 
Perl 1 пък изизква поставянето на вградената функция C<do> пред името на 
функцията:

=begin programlisting

    # outdated style; avoid
    my $result = &calculate_result( 52 );

    # Perl 1 style; avoid
    my $result = do calculate_result( 42 );

    # crazy mishmash; really truly avoid
    my $result = do &calculate_result( 42 );

=end programlisting

Остарелите форми затрудняват четенето на кода, а пък предхождащия ъперсанд 
може да ви погоди и изненадващи номера. За начало, премахва проверките за
прототип. Второ, той I<по подразбиране> подава съдържанието на C<@_> 
без каквато и да е промяна ако вие не подадете аргументи изрично. 
И двете проявления могат да доведат до неочаквано поведение на вашия код.

И един последен капан би могло да е изпускането на скобите при извикване на функция.
Парсера на Perl 5 ползва някои приложни похвати за да разграничи възможните 
аргументи на функцията от голите думи. Е, приложните похвати понякога дават 
грешни резултати:

=begin programlisting

    # warning; contains a subtle bug
    ok elem_exists 1, @elements, 'found first element';

=end programlisting

Извикването на C<elem_exists()> ще изпапка тестовото описание, замислено като
втори аргумент на C<ok()>. Поради това че C<elem_exists()> използва изсмукващ втори
аргумент, тази грешка може да остане незабелязана докато Perl не издаде предупреждение
за сравнение между елемент от масива и нещо което не е число ( тестовото описание, 
което не може да бъде конвертирано до число).

Прекомернат употреба на скоби може да ни затрудни при четене,
умелата им употреба обаче прави четенето по-лесно и намалява възможността за промъкване
на дребни грещчици в кода.
