=encoding utf8

=head1 Изразителност

Z<expressivity>

X<Уол, Лари>
X<Лари Уолл>

Изследванията на Лари Уол в сферата на лингвистиката и човешките езици
повлияват на дизайна на Perl. Езикът позволява огромна свобода по отношение
на подхода и стила на писане в зависимост от естеството на задачата, наличното
време, очакваният живот на програмата или дори доколко сте творчески настроен.
Може да пишете прост, целенасочен код или да интегрирате в по-голям, добре
замислен проект. Имате възможността да избирате от множество парадигми за
дизайн, да избягвате или да използвате по-сложните възможности на езика.

Ако другите езици налагат един начин на писане като най-добър, Perl позволява
I<вие> да решите кое е най-четимо или полезно, или забавно.

X<TIMTOWTDI>
X<Tim Toady>

Perl-хакерите имат лозунг: I<TIMTOWTDI>, произнася се "Тим Тоуди" и означава
"Има повече от един начин да се направи това!"

Въпреки, че тази изразителност позволява на майсторите да създават изумителни
програми, тя позволява и на невнимателните и неразумните да създават бъркотии.
Опитът и добрият вкус ще ви напътстват в писането на велик код. Изборът е ваш,
но мислете винаги доколко е четим и как ще се поддържа кода ви от тези,
които идват след вас.

Новаците в Perl може би често се сблъскват с неразбираеми за тях конструкции.
Много от тези идиоми (L<idioms>) предоставят голяма (макар и трудна за
овладяване) мощ. Не е проблем ако ги избягвате, докато свикнете с тях.

Да се учи Perl е като да учите нов говорим език. Ще научите няколко думи, ще ги
съберете в изречение и скоро ще се радвате на простички разговори. Майсторлъкът
идва с практикуване на писането и четенето. Не е нужно да владеете всяка
подробност,за да бъдете продуктивни, но принципите в тази глава са
основополагащи за развитието ви като програмист.

Друга цел, която е изначално заложена в Perl, е да се намалят изненадите у
опитните (Perl-) програмисти. например събранието на две променливи
(C<$first_num + $second_num>) очевидно е операция с числа (L<numeric_operators>).
Операторът за събиране трябва да третира подадените му аргументи като числови
стойности и да произведе числов резултат. Независимо от съдържанието на
C<$first_num> и C<$second_num>, Perl ще ги ползва като числови стойности
(L<numeric_coercion>). Вие сте изразили намерението си да ги третирате като
числа, използвайки оператора за събиране. Perl го прави с удоволствие.

X<DWIM>
X<принцип на минималната изненада>

Опитните Perl-програмисти често наричат това 
I<принципът DWIM> - I<do what I mean> (I<правѝ каквото си мисля>).
Казано по друг начин, Perl следва I<принципът на минималната изненада>.
Ако имате повърхностни знания за Perl (особено по отношение на контекста; L<context_philosophy>), би трябвало лесно да разберете намерението, което
е имал авторът на непознат за вас израз в Perl. Ще развиете това умение.

X<бебешки Perl>

Изразителността на Perl също позволява на новаците да пишат полезни програми,
без да е необходимо да разбират всичко. Резултатът от такова писане, често се
нарича I<baby Perl>. Всеки иска да помогне на бебетата да общуват добре.
Всеки е новак в началото. Чрез практика и като учите от по-опитните програмисти,
ще усвоите и разберете по-мощните идиоми и техники.

Опитният Perl-хакер например би умножил всеки елемент от даден списък с числа
по следния начин:

=begin programlisting

    my @tripled = map { $_ * 3 } @numbers;

=end programlisting

... а пък някой вещ в Perl може да напише:

=begin programlisting

    my @tripled;

    for my $num (@numbers)
    {
        push @tripled, $num * 3;
    }

=end programlisting

... докато новакът би опитал следното:

=begin programlisting

    my @tripled;

    for (my $i = 0; $i < scalar @numbers; $i++)
    {
        $tripled[$i] = $numbers[$i] * 3;
    }

=end programlisting

И трите подхода постигат един и същи резултат, но всеки от тях ползва
Perl по различен начин.

Опитът в писането на Perl ще ви помогне да се фокусирате върху I<това, което
искате да направите>, а не върху това I<как> да го направите.
Във всеки случай, Perl безпрекословно ще изпълнява прости програми.
Може да доизкусурявате програмите си, да ги правите по-изразителни, по-ясни,
по-лесни за поддръжка, да преизползвате код. Възползвайте се от тази гъвкавост
и прагматизъм. Много по-добре да изпълните задачата си ефективно сега,отколкото
да имате концептуално изчистена и красива програма след година.
