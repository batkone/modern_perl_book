=head1 Изразителност

Z<expressivity>

X<Уол, Лари>
X<Лари Уолл>

Изследванията на Лари Уол в сферата на лингвистиката и човешките езици
повлияват на дизайна на Perl. Езикът позволява огромна свобода по отношение
на подхода и стила на писане в зависимост от естеството на задачата, наличното
време, очакваният живот на програмата или дори доколко сте творчески настроен.
Може да пишете прост, целенасочен код или да интегрирате в по-голям, добре
замислен проект. Имате възможността да избирате от множество парадигми за
дизайн, да избягвате или да използвате по-сложните възможности на езика.

Ако другите езици налагат един начин на писане като най-добър, Perl позволява
I<вие> да решите кое е най-четимо или полезно, или забавно.

X<TIMTOWTDI>
X<Tim Toady>

Perl-хакерите имат лозунг: I<TIMTOWTDI>, произнася се "Тим Тоуди" и означава
"Има повече от един начин да се направи това!"

Въпреки, че тази изразителност позволява на майсторите да създават изумителни
програми, тя позволява и на невнимателните и неразумните да създават бъркотии.
Опитът и добрият вкус ще ви напътстват в писането на велик код. Изборът е ваш,
но мислете винаги доклоко е четим и как ще се поддържа кода ви от тези,
които идват след вас.

Новаците в Perl може би често се сблъскват с неразбираеми за тях конструкции.
Много от тези идиоми (L<idioms>) предоставят голяма (макар и трудна за
овладяване) мощ. Не е проблем ако ги избягвате, докато свикнете с тях.

Да се учи Perl е като да учите нов говорим език. Ще научите няколко думи, ще ги
съберете в изречение и скоро ще се радвате на простички разговори. Майсторлъка
идва с практикуване на писането и четенето. Не е нужно да владеете всяка подробност,
за да бъдете продуктивни, но принципите в тази глава са основополагащи
за развитието ви като програмист.

As another design goal, Perl tries to avoid surprising experienced (Perl)
programmers.  For example, adding two variables (C<$first_num + $second_num>)
is obviously a numeric operation (L<numeric_operators>); the addition operator
must treat both as numeric values to produce a numeric result. No matter the
contents of C<$first_num> and C<$second_num>, Perl will coerce them to numeric
values (L<numeric_coercion>). You've expressed your intent to treat them as
numbers by using a numeric operator. Perl happily does so.

X<DWIM>
X<principle of least astonishment>

Perl adepts often call this principle I<DWIM>, or I<do what I mean>.  Another
phrasing is that Perl follows the I<principle of least astonishment>.  Given a
cursory understanding of Perl (especially context; L<context_philosophy>), it
should be possible to understand the intent of an unfamiliar Perl expression.
You will develop this skill.

X<baby Perl>

Perl's expressivity also allows novices to write useful programs without having
to understand everything. The resulting code is often called I<baby Perl>, in
the sense that most everyone wants to help babies learn to communicate well.
Everyone begins as a novice. Through practice and learning from more experienced
programmers, you will understand and adopt more powerful idioms and techniques.

Оптитният Perl-хакер например би умножил всеки елемент от даден списък с числа
по следния начин:

=begin programlisting

    my @tripled = map { $_ * 3 } @numbers;

=end programlisting

... а пък някой вещ в Perl може да напише:

=begin programlisting

    my @tripled;

    for my $num (@numbers)
    {
        push @tripled, $num * 3;
    }

=end programlisting

... докато новакът би опитал следното:

=begin programlisting

    my @tripled;

    for (my $i = 0; $i < scalar @numbers; $i++)
    {
        $tripled[$i] = $numbers[$i] * 3;
    }

=end programlisting

И трите подхода постигат един и същи резултат, но всеки от тях ползва
Perl по различен начин.

Experience writing Perl will help you to focus on I<what> you want to do rather
than I<how> to do it. Even so, Perl will happily run simple programs. You can
design and refine your programs for clarity, expressivity, reuse, and
maintainability, in part or in whole. Take advantage of this flexibility and
pragmatism: it's far better to accomplish your task effectively now than to
write a conceptually pure and beautiful program next year.
