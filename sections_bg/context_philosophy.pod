=encoding utf8

=head1 Контекст

Z<context_philosophy>

X<контекст>

В говоримите езици значението на една дума или фраза може да зависи
от начина, по който се използва. Текущият I<контекст> изяснява влаганото
значение. Например, неправилното използване на множествено число в
"Моля дайте ми един хамбургери"N<Множественото число не съответства на
количеството.> звучи грешно. Подобен е случаят с грешното използване на род
за съществителните имена - "la gâteau"N<Използваният член е за женски род, а
съществителното е в мъжки род.>. Това е смешно за французите. Забележете
също, че на английски език местоимението "you" или съществителното
"sheep" могат да са в единствено или множествено число в зависимост от контекста.

Контекстът в Perl е подобен. Той определя количеството и вида данни, които
се ползват. Perl ще се опита да достави каквото сте му поискали -- като се
предполага, че вие сте избрали подходящия контекст.

Някои операции в Perl имат различно поведение, в зависимост от това дали искате
да ви върнат нула, един или повече резултати. Един и същи израз може да направи 
едно, ако кажеш "Направи това, но не ми трябва резултата", и съвсем друго, 
ако си казал "Направи това и очаквам няколко резултата". Други изрази пък ви дават
възможността да уточните, че очаквате число, текст или булев резултат (истина/лъжа).

Контекстът може да се окаже коварен, ако се опитате да пишете или четете код
като проста последователност от изрази, извадени от "контекста".
Ще има случаи, в които се плесвате по челото след дълго дебъгване, открили,
че предположенията ви относно контекста са грешни. Ако обаче сте познавачи,
кодът ви ще е сбит, правилен и по-чист.

=head2 Празен, Скаларен и Списъчен Контекст

Z<amount_context>

X<контекст; количество>
X<количествен контекст>

I<Количественият контекст> определя I<броя> на върнатите стойности от дадена
операция. Съгласуването на глаголите по число е добър пример от английския език. 
Дори без да знаете формалното определение за този лингвистичен принцип,
най-вероятно разбирате грешката в изречението "Perl са забавен език".
В Perl получаваш толкова стойности, колкото си заявилN<Представете си го като 
единствено и множествено число в човешките езици. (бел. прев.)>.

X<празен контекст>
X<контекст; празен>

Нека предположим, че имате функция (L<functions>), наречена C<find_chores()>,
която подрежда списъка с домакинските ви задачи по приоритет. Начинът, по който
извиквате тази функция, определя какво ще върне тя. Може би нямате време за
домакинска работа и извикването на функцията е само начин да изглеждате много
трудолюбив. Може и да имате време за една задачка от списъка, а може и да сте
изпълнени с енергия през почивните дни и да искате да свършите колкото
се може повече.

Ако извикате функцията без да използвате върната от нея стойност, вие сте я
извикали в I<празен контекст>:

=begin programlisting

    find_chores();

=end programlisting

X<контекст; скаларен>
X<скаларен контекст>

Като присвоявате върнатия от функцията резултат на скаларна (единична) променлива (L<scalars>), вие я 
изпълнявате в I<скаларен контекст>:

=begin programlisting

    my $single_result = find_chores();

=end programlisting

X<списъчен контекст>
X<контекст; списък>

Като присвоявате върнатия от функцията резултат на масив (L<arrays>), вие я изпълнявате 
в I<списъчен контекст>:

=begin programlisting

    my @all_results             = find_chores();
    my ($single_element, @rest) = find_chores();
    process_list_of_results( find_chores() );

=end programlisting

Кръглите скоби на втория ред от предния пример групират две декларации (L<lexical_scope>)
на променливи по такъв начин, че присвояването ще се държи както очаквате. Ако C<@rest> 
няма да се използва, щеше да е правилно и ако напишете:

=begin programlisting

    my B<(>$single_elementB<)>   = find_chores();

=end programlisting

В този случай подказвате на Perl-парсъра, че искате списъчен контекст,
като ползвате (присвоявате на променлива) само една стойност от върнатия списък.
Разликата с по-предния пример е едва доловима, но след като сте вече наясно 
с количествения контекст, би трябвало да е очевидна за вас:

=begin programlisting

    my $scalar_context = find_chores();
    my B<(>$list_contextB<)> = find_chores();

=end programlisting

Изпълнението на функция или израз в списъчен контекст без видимо присвояване може да
ви обърка. Списъците предават контекста си на изразите, които съдържат.
И двете извиквания на C<find_chores()> в следващия пример са в списъчен контекст:

=begin programlisting

    process_list_of_results( find_chores() );

    my %results =
    (
        cheap_operation     => $cheap_results,
        expensive_operation => find_chores(), # ОПАА!
    );

=end programlisting

X<builtins; C<scalar>>

Последният пример често изненадва начинаещи програмисти. Инициализацията на хеш
(L<hashes>) със списък от стойности създава списъчен контекст за C<find_chores>.
Използвайте оператора C<scalar>, за да извикате функцията в скаларен контекст:

=begin programlisting

    my %results =
    (
        cheap_operation     => $cheap_results,
        expensive_operation => B<scalar> find_chores(),
    );

=end programlisting

Защо контекстът е от значение? Функция, която прави различни неща в зависимост от
контекста, може да провери в какъв контекст е извикана и да разбере какво има да
прави. В скаларен контекст може да намери само най-важната задача. В празен
контекст C<find_chores()> спокойно може да не прави нищо. В списъчен контекст
трябва да сортира и върне целия списък със задачи.

=head2 Числов, Низов и Булев Контекст

Z<value_contexts>

X<стойностен контекст>
X<контекст; стойност>
X<типов контекст>
X<тип>

Другият контекст в Perl -- I<стойностен контекст> -- управлява начина, по който
Perl обработва едно парче данни. Сигурно вече сте забелязали, колко е гъвкав
Perl и как успява да разбере дали работите с число или низ и да превръща
стойността от един тип в друг в зависимост от това как ползвате данните.
В замяна на това, че не трябва да декларирате (или поне да следите) I<типа> на
данните, които съдържа една променлива или връща дадена функция, типовите
контексти в Perl предоставят подсказки, които казват на компилатора как да
третира данните.

X<вградени оператори; C<eq>>

Perl ще третира стойностите като определен тип (L<coercion>) в зависимост от
операторите, които използвате. Например, операторът C<eq> проверява дали
два низа съдържат една и съща информация I<като низове>:

=begin programlisting

    say "Catastrophic crypto fail!" if $alice eq $bob;

=end programlisting

You may have had a baffling experience where you I<know> that the strings are
different, but they still compare the same:

=begin programlisting

    my $alice = 'alice';
    say "Catastrophic crypto fail!" if $alice == 'Bob';

=end programlisting

X<string context>
X<numeric context>
X<context; string>
X<context; numeric>

X<builtins; C<==>>

The C<eq> operator treats its operands as strings by enforcing I<string
context> on them.  The C<==> operator imposes I<numeric context>. In numeric
context, both strings evaluate to C<0> (L<numeric_coercion>). Be sure to use
the proper operator for the type of context you want.

X<boolean context>
X<context; boolean>

I<Boolean context> occurs when you use a value in a conditional statement. In
the previous examples, C<if> evaluated the results of the C<eq> and C<==>
operators in boolean context.

X<context; explicit>

In rare circumstances, you may need to force an explicit context where no
appropriately typed operator exists. To force a numeric context, add zero to a
variable. To force a string context, concatenate a variable with the empty
string. To force a boolean context, double the negation operator:

=begin programlisting

    my $numeric_x =  0 + $x;  # forces numeric context
    my $stringy_x = '' . $x;  # forces string  context
    my $boolean_x =    !!$x;  # forces boolean context

=end programlisting

Type contexts are easier to identify than amount contexts. Once you know which
operators provide which contexts (L<operator_types>), you'll rarely make
mistakes.
