=encoding utf8

=head1 Контекст

Z<context_philosophy>

X<контекст>

В говоримите езици значението на една дума или фраза може да зависи
от начина, по който се използва. Текущият I<контекст> изяснява специфичното
значение. Например неправилното използване на множествено число в
"Моля дайте ми един хамбургери"N<Множественото число не съответства на
количеството.> звучи грешно. Подобен е случаят с грешното използване на род
за съществителните имена - "la gâteau"N<Използваният член е за женски род, а
съществителното е в мъжки род.>. Това е смешно за французите. Забележете
също например, че на английски език местоимението "you" или съществителното
"sheep" могат да са в единствено или множествено число в зависимост от контекста.

Контекстът в Perl е подобен. Той влияе на количеството и вида данни, които
се ползват. Perl ще се опита да достави каквото сте му поискали -- като се
предполага, че вие сте избрали подходящия контекст.

Някои операции в Perl имат различно поведение в зависимост от това дали искате
да ви върнат нула, един или повече резултати. Един и същи израз може да направи 
едно ако кажеш "Направи това, но не ми трябва резултата." и съвсем друго 
ако си казал "Направи това и очаквам няколко резултата". Други изрази пък ви дават
възможността да уточните, че очквате число, текст или булев резултат (истина/лъжа).

Контекстът може да се окаже коварен ако се опитате да пишете код
като проста последователност от изрази извадени от "контекста".
Ще има случаи, в които се плесвате по челото след дълго дебъгване, открили,
че предположенията ви относно контекста са грешни. Ако обаче сте познавачи,
кодът ви ще е сбит, правилен и по-чист.

=head2 Празен, Скаларен и Списъчен Контекст

Z<amount_context>

X<контекст; количество>
X<количествен контекст>

I<Количественият контекст> определя броя на върнатите стойности от дадена
операция. Съгласуването на глаголите по число е добър пример от английския език. 
Дори без да знаете формалното определение за този лингвистичен принцип,
най-вероятно разбирате грешката в изречението "Perl са забавен език".
В Perl получаваш толкова стойности колкото си заявилN<Представете си го като 
единствено и множествено число в човешките езици. (бел. прев.)>.

X<празен контекст>
X<контекст; празен>

Нека предположим, че имате функция (L<functions>), наречена C<find_chores()>,
която подрежда списъка с къщните ви задачи по приоритет. Начинът, по който
извиквате тази функция, определя какво ще върне тя. Може би нямате време за
домакинска работа и извикването на функцията е само начин да изглеждате много
трудолюбив. Може и да имате време за една задачка от списъка, а може и да сте
изпълнени с енергия през почивните дни и да искате да свършите колкото
се може повече.

Ако извикате функцията без да използвате върната от нея стойност, вие сте я
извикали в I<празен контекст>:

=begin programlisting

    find_chores();

=end programlisting

X<контекст; скаларен>
X<скаларен контекст>

Като присвоите върнатия от функцията резултат на скаларна (единична) променлива (L<scalars>), вие я 
изпълнявате в I<скаларен контекст>:

=begin programlisting

    my $single_result = find_chores();

=end programlisting

X<list context>
X<context; list>

Assigning the results of calling the function to an array (L<arrays>) or a
list, or using it in a list, evaluates the function in I<list context>:

=begin programlisting

    my @all_results             = find_chores();
    my ($single_element, @rest) = find_chores();
    process_list_of_results( find_chores() );

=end programlisting

The parentheses in the second line of the previous example group the two
variable declarations (L<lexical_scope>) so that assignment will behave as you
expect. If C<@rest> were to go unused, you could also correctly write:

=begin programlisting

    my B<(>$single_elementB<)>   = find_chores();

=end programlisting

.... in which case the parentheses give a hint to the Perl 5 parser that you
intend list context for the assignment even though you assign only one element
of a list. This is subtle, but now that you know about it, the difference of
amount context between these two statements should be obvious:

=begin programlisting

    my $scalar_context = find_chores();
    my B<(>$list_contextB<)> = find_chores();

=end programlisting

Evaluating a function or expression--except for assignment--in list context can
produce confusion. Lists propagate list context to the expressions they
contain. Both of these calls to C<find_chores()> occur in list context:

=begin programlisting

    process_list_of_results( find_chores() );

    my %results =
    (
        cheap_operation     => $cheap_results,
        expensive_operation => find_chores(), # OOPS!
    );

=end programlisting

X<builtins; C<scalar>>

The latter example often surprises novice programmers, as initializing a hash
(L<hashes>) with a list of values imposes list context on C<find_chores>. Use
the C<scalar> operator to impose scalar context:

=begin programlisting

    my %results =
    (
        cheap_operation     => $cheap_results,
        expensive_operation => B<scalar> find_chores(),
    );

=end programlisting

Why does context matter? A context-aware function can examine its calling
context and decide how much work it must do. In void context, C<find_chores()>
may legitimately do nothing. In scalar context, it can find only the most
important task. In list context, it must sort and return the entire list.

=head2 Numeric, String, and Boolean Context

Z<value_contexts>

X<value context>
X<context; value>

Perl's other context--I<value context>--governs how Perl interprets a piece of
data.  You've probably already noticed that Perl's flexible about figuring out
if you have a number or a string and converting between the two as you want
them. In exchange for not having to declare (or at least track) explicitly what
I<type> of data a variable contains or a function produces, Perl's type
contexts provide hints that tell the compiler how to treat data.

X<builtins; C<eq>>

Perl will coerce values to specific proper types (L<coercion>), depending on
the operators you use. For example, the C<eq> operator tests that strings
contain the same information I<as strings>:

=begin programlisting

    say "Catastrophic crypto fail!" if $alice eq $bob;

=end programlisting

You may have had a baffling experience where you I<know> that the strings are
different, but they still compare the same:

=begin programlisting

    my $alice = 'alice';
    say "Catastrophic crypto fail!" if $alice == 'Bob';

=end programlisting

X<string context>
X<numeric context>
X<context; string>
X<context; numeric>

X<builtins; C<==>>

The C<eq> operator treats its operands as strings by enforcing I<string
context> on them.  The C<==> operator imposes I<numeric context>. In numeric
context, both strings evaluate to C<0> (L<numeric_coercion>). Be sure to use
the proper operator for the type of context you want.

X<boolean context>
X<context; boolean>

I<Boolean context> occurs when you use a value in a conditional statement. In
the previous examples, C<if> evaluated the results of the C<eq> and C<==>
operators in boolean context.

X<context; explicit>

In rare circumstances, you may need to force an explicit context where no
appropriately typed operator exists. To force a numeric context, add zero to a
variable. To force a string context, concatenate a variable with the empty
string. To force a boolean context, double the negation operator:

=begin programlisting

    my $numeric_x =  0 + $x;  # forces numeric context
    my $stringy_x = '' . $x;  # forces string  context
    my $boolean_x =    !!$x;  # forces boolean context

=end programlisting

Type contexts are easier to identify than amount contexts. Once you know which
operators provide which contexts (L<operator_types>), you'll rarely make
mistakes.
